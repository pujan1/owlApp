
var MongoClient = require('mongodb').MongoClient
, assert = require('assert');
const request = require('request');

let match_ids = [
  10525,10526,10527,10528,10529,10530,10531,10532,10533,10534,10535,10536,10223,10224,10225,10226,10227,10228,10229,
  10230,10231,10232,10233,10234,10235,10236,10237,10238,10239,10240,10241,10242,10243,10244,10245,10246,10247,10248,
  10249,10250,10251,10252,10253,10254,10255,10256,10257,10258,10259,10260,10261,10262,10263,10264,10265,10266,10267,
  10268,10269,10270,10564,10565,10566,10567,10568,10569,10570,10571,10572,10573,10574,10575,10537,10539,10278,10279,
  10280,10281,10282,10283,10284,10285,10286,10287,10288,10289,10290,10291,10292,10293,10294,10295,10296,10297,10298,
  10299,10300,10301,10302,10303,10304,10305,10306,10307,10308,10309,10310,10311,10312,10313,10314,10315,10316,10317,
  10318,10319,10320,10321,10322,10323,10324,10325,10576,10577,10578,10579,10580,10581,10582,10583,10584,10585,10586,
  10587,10540,10542,10333,10334,10335,10336,10337,10338,10339,10340,10341,10342,10343,10344,10345,10346,10347,10348,
  10349,10350,10351,10352,10353,10354,10355,10356,10357,10358,10359,10360,10361,10362,10363,10364,10365,10366,10367,
  10368,10369,10370,10371,10372,10373,10374,10375,10376,10377,10378,10379,10380,10588,10589,10590,10591,10592,10593,
  10594,10595,10596,10597,10598,10599,10543,10544,10545,10443,10444,10445,10446,10447,10448,10449,10450,10451,10452,
  10453,10454,10455,10456,10457,10458,10459,10460,10461,10462,10463,10464,10465,10466,10467,10468,10469,10470,10471,
  10472,10473,10474,10475,10476,10477,10478,10479,10480,10481,10482,10483,10484,10485,10486,10487,10488,10489,10490,
  10621,10622,10623,10624,10625,10626,10627,10628,10629,10630,10631,10632,10546,10547,10548,13121,13124,13122,13123,
  13125,13126,13130,13127,13128,13129,13131,13132,13133,13134,13135];

//const url = 'mongo url';

MongoClient.connect(url, function(err, db) {
  assert.equal(null, err);

  for (let index in match_ids) {
    for (let i=1; i<=5; i++) {
      const url = 'https://api.overwatchleague.com/stats/matches/' + match_ids[index] + '/maps/' + i;

      request(url, { json: true }, (err, res, body) => {
        if (err) { return console.log(err); }

        if(res.statusCode == 200) {
          db.collection('matches').insertOne(body, function(err, r) {
            assert.equal(null, err);
            assert.equal(1, r.insertedCount);
          });
        } else {
          db.collection('matches').insertOne({"esports_match_id": match_ids[index],"game_number": i,"exists": false}, function(err, r) {
            assert.equal(null, err);
            assert.equal(1, r.insertedCount);
          });
        }
      });
    }
  }
  db.close();
});


